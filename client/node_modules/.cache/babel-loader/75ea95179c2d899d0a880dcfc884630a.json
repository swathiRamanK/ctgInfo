{"ast":null,"code":"var _jsxFileName = \"D:\\\\swathi folder\\\\mern-auth-with-frontend\\\\mern-auth\\\\client\\\\src\\\\components\\\\dashboard\\\\Dashboard.js\";\nimport React, { Component } from \"react\";\nimport moment from 'moment';\nimport Moment from 'react-moment';\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../actions/authActions\"; // calender import\n\nimport FullCalendar, { EventApi, DateSelectArg, EventClickArg, EventContentArg, formatDate } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { INITIAL_EVENTS, createEventId } from './event-utils';\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onLogoutClick = e => {\n      e.preventDefault();\n      this.props.logoutUser();\n    };\n\n    this.handleEventClick = ({\n      event\n    }) => {\n      console.log(event); // openAppointment is a function I wrote to open a form to edit that appointment\n\n      console.log('kkk');\n    };\n  }\n\n  render() {\n    const {\n      user\n    } = this.props.auth;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"timesheet-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, user.name.split(\" \")[0], \"! Here is your time sheet space\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.onLogoutClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, \"Logout\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"calender-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      initialView: \"dayGridMonth\",\n      editable: true,\n      selectable: true,\n      selectMirror: true,\n      dayMaxEvents: true,\n      weekends: this.state.weekendsVisible,\n      initialEvents: INITIAL_EVENTS // alternatively, use the `events` setting to fetch from a feed\n      ,\n      select: this.handleDateSelect // eventContent={renderEventContent} // custom render function\n      ,\n      eventClick: this.handleEventClick,\n      eventsSet: this.handleEvents // called after events are initialized/added/changed/removed\n\n      /* you can update a remote database when these fire:\r\n      eventAdd={function(){}}\r\n      eventChange={function(){}}\r\n      eventRemove={function(){}}\r\n      */\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 1\n      }\n    })));\n  }\n\n}\n\nDashboard.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  logoutUser\n})(Dashboard);","map":{"version":3,"sources":["D:/swathi folder/mern-auth-with-frontend/mern-auth/client/src/components/dashboard/Dashboard.js"],"names":["React","Component","moment","Moment","PropTypes","Button","connect","logoutUser","FullCalendar","EventApi","DateSelectArg","EventClickArg","EventContentArg","formatDate","dayGridPlugin","timeGridPlugin","interactionPlugin","INITIAL_EVENTS","createEventId","Dashboard","onLogoutClick","e","preventDefault","props","handleEventClick","event","console","log","render","user","auth","name","split","left","center","right","state","weekendsVisible","handleDateSelect","handleEvents","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport moment from 'moment';\r\nimport Moment from 'react-moment';\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\n\r\n// calender import\r\nimport FullCalendar, { EventApi, DateSelectArg, EventClickArg, EventContentArg, formatDate } from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\nimport { INITIAL_EVENTS, createEventId } from './event-utils'\r\n\r\n\r\n\r\nclass Dashboard extends Component {\r\n  onLogoutClick = e => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n\r\n\r\n  handleEventClick= ({event}) => {\r\n\r\n    console.log(event)\r\n    // openAppointment is a function I wrote to open a form to edit that appointment\r\n    console.log('kkk');\r\n}\r\n\r\n\r\n\r\n  render() {\r\n    const { user } = this.props.auth;\r\n\r\n\r\n\r\n    return (\r\n      <div className=\"timesheet-page\" >\r\n\r\n        <h4>\r\n          {user.name.split(\" \")[0]}!\r\n              Here is your time sheet space\r\n            </h4>\r\n        <Button variant=\"primary\" onClick={this.onLogoutClick}>Logout</Button>\r\n\r\n        {/* timesheet section */}\r\n\r\n        <div className=\"calender-section\">\r\n          {/* <FullCalendar\r\n            defaultView=\"dayGridMonth\"\r\n            plugins={[dayGridPlugin, interactionPlugin]}\r\n            editable={true}\r\n            dateClick ={this.handleEventClick}\r\n            select={this.handleDateSelect}\r\n\r\n          /> */}\r\n\r\n<FullCalendar\r\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n            headerToolbar={{\r\n              left: 'prev,next today',\r\n              center: 'title',\r\n              right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n            }}\r\n            initialView='dayGridMonth'\r\n            editable={true}\r\n            selectable={true}\r\n            selectMirror={true}\r\n            dayMaxEvents={true}\r\n            weekends={this.state.weekendsVisible}\r\n            initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\r\n            select={this.handleDateSelect}\r\n           // eventContent={renderEventContent} // custom render function\r\n            eventClick={this.handleEventClick}\r\n            eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\r\n            /* you can update a remote database when these fire:\r\n            eventAdd={function(){}}\r\n            eventChange={function(){}}\r\n            eventRemove={function(){}}\r\n            */\r\n          />\r\n        </div>\r\n\r\n\r\n\r\n        {/* \r\n                    eventDrop={this.handleEventDrop}\r\n                    eventClick={this.handleEventClick}\r\n                    events={this.formatEvents()} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nDashboard.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { logoutUser }\r\n)(Dashboard);"]},"metadata":{},"sourceType":"module"}