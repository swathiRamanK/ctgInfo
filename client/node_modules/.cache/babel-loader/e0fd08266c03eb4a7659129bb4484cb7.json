{"ast":null,"code":"var _jsxFileName = \"D:\\\\swathi folder\\\\mern-auth-with-frontend\\\\mern-auth\\\\client\\\\src\\\\components\\\\dashboard\\\\Dashboard.js\";\nimport React, { Component } from \"react\";\nimport moment from 'moment';\nimport Moment from 'react-moment';\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../actions/authActions\"; // calender import\n\nimport FullCalendar, { EventApi, DateSelectArg, EventClickArg, EventContentArg, formatDate, ViewApi } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid'; // import timeGridPlugin from '@fullcalendar/timegrid';\n\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { INITIAL_EVENTS, createEventId } from './event-utils.js';\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onLogoutClick = e => {\n      e.preventDefault();\n      this.props.logoutUser();\n    };\n\n    this.handleDateSelect = ({\n      selectionInfo: ev\n    }) => {\n      console.log(ev); // openAppointment is a function I wrote to open a form to edit that appointment\n\n      console.log('kkk');\n    };\n\n    this.handleDateSelect = selectInfo => {\n      console.log('selectInfo', selectInfo);\n      let title = prompt('Please enter your logged hours');\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect(); // clear date selection\n\n      if (title) {\n        console.log('calendarApi', calendarApi);\n        calendarApi.addEvent(\n        /*{\r\n        id: createEventId(),\r\n        title,\r\n        start: selectInfo.startStr,\r\n        end: selectInfo.endStr,\r\n        allDay: selectInfo.allDay\r\n        },*/\n        {\n          id: createEventId(),\n          title,\n          start: calendarApi.view.currentStart,\n          end: calendarApi.view.currentEnd,\n          allDay: selectInfo.allDay\n        });\n      }\n    };\n  }\n\n  render() {\n    //moment js \n    var start = moment('2016-10-05 12:00:00').utc().startOf('month');\n    var end = moment('2016-10-05 12:00:00').utc().endOf('month');\n    var nrofWeeks = moment.duration(end - start).weeks() + 1;\n    var startDate = moment([2020, 8 - 1]); // Clone the value before .endOf()\n\n    var endDate = moment(startDate).endOf('week');\n    console.log('starting at', start.format());\n    console.log('ending at', end.format());\n    console.log('number of weeks', nrofWeeks); // just for demonstration:\n\n    console.log(startDate.format(\"DD-MM-YYYY\"));\n    console.log(endDate.add(7, 'days').format(\"DD-MM-YYYY\")); // mommet js - end\n\n    const {\n      user\n    } = this.props.auth;\n    const events = [{\n      title: \"\",\n      date: ''\n    }];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"timesheet-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, user.name.split(\" \")[0], \"! Here is your time sheet space\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.onLogoutClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, \"Logout\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"calender-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FullCalendar, {\n      plugins: [dayGridPlugin, interactionPlugin],\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      initialView: \"dayGridMonth\",\n      editable: true,\n      selectable: true,\n      selectMirror: true,\n      dayMaxEvents: true,\n      weekends: true //initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\n      ,\n      select: this.handleDateSelect,\n      dateClick: this.handleEventClick // eventContent={renderEventContent} // custom render function\n      ,\n      eventClick: this.handleEventClick,\n      eventsSet: this.handleEvents // called after events are initialized/added/changed/removed\n      ,\n      events: events,\n      viewSkeletonRender: info => {\n        this.callbackFunction(info);\n      }\n      /* you can update a remote database when these fire:\r\n      eventAdd={function(){}}\r\n      eventChange={function(){}}\r\n      eventRemove={function(){}}\r\n      */\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 1\n      }\n    })));\n  }\n\n}\n\nDashboard.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  logoutUser\n})(Dashboard);","map":{"version":3,"sources":["D:/swathi folder/mern-auth-with-frontend/mern-auth/client/src/components/dashboard/Dashboard.js"],"names":["React","Component","moment","Moment","PropTypes","Button","connect","logoutUser","FullCalendar","EventApi","DateSelectArg","EventClickArg","EventContentArg","formatDate","ViewApi","dayGridPlugin","interactionPlugin","INITIAL_EVENTS","createEventId","Dashboard","onLogoutClick","e","preventDefault","props","handleDateSelect","selectionInfo","ev","console","log","selectInfo","title","prompt","calendarApi","view","calendar","unselect","addEvent","id","start","currentStart","end","currentEnd","allDay","render","utc","startOf","endOf","nrofWeeks","duration","weeks","startDate","endDate","format","add","user","auth","events","date","name","split","left","center","right","handleEventClick","handleEvents","info","callbackFunction","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport moment from 'moment';\r\nimport Moment from 'react-moment';\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\n\r\n// calender import\r\nimport FullCalendar, { EventApi, DateSelectArg, EventClickArg, EventContentArg, formatDate,ViewApi} from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\n// import timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport { INITIAL_EVENTS, createEventId } from './event-utils.js'\r\n\r\n\r\n\r\nclass Dashboard extends Component {\r\n  onLogoutClick = e => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n\r\n\r\n  \r\n \r\n\r\n\r\n  handleDateSelect= ({selectionInfo:ev}) => {\r\n\r\n    console.log(ev)\r\n    // openAppointment is a function I wrote to open a form to edit that appointment\r\n    console.log('kkk');\r\n}\r\n\r\nhandleDateSelect = (selectInfo: DateSelectArg) => {\r\n\r\n  console.log('selectInfo',selectInfo);\r\n  let title = prompt('Please enter your logged hours')\r\n  let calendarApi = selectInfo.view.calendar\r\n\r\n  calendarApi.unselect() // clear date selection\r\n\r\n  if (title) {\r\n\r\n    console.log('calendarApi',calendarApi)\r\n    calendarApi.addEvent(\r\n      /*{\r\n      id: createEventId(),\r\n      title,\r\n      start: selectInfo.startStr,\r\n      end: selectInfo.endStr,\r\n      allDay: selectInfo.allDay\r\n    },*/\r\n    {\r\n      id: createEventId(),\r\n      title,\r\n      start: calendarApi.view.currentStart,\r\n      end:calendarApi.view.currentEnd,\r\n      allDay: selectInfo.allDay\r\n    })\r\n  }\r\n}\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n\r\n    //moment js \r\n\r\n    var start = moment('2016-10-05 12:00:00').utc().startOf('month');\r\n  var end = moment('2016-10-05 12:00:00').utc().endOf('month');\r\n  \r\n  var nrofWeeks = moment.duration(end - start).weeks() + 1;\r\n  \r\n  var startDate = moment([2020, 8 - 1]);\r\n  \r\n      // Clone the value before .endOf()\r\n      var endDate = moment(startDate).endOf('week');\r\n  console.log('starting at', start.format());\r\n  console.log('ending at', end.format());\r\n  console.log('number of weeks', nrofWeeks);\r\n    // just for demonstration:\r\n    console.log(startDate.format(\"DD-MM-YYYY\"));\r\n    console.log(endDate.add(7, 'days').format(\"DD-MM-YYYY\"));\r\n\r\n    // mommet js - end\r\n    const { user } = this.props.auth;\r\n\r\n    const events = [{ title: \"\", date:''}];\r\n\r\n\r\n\r\n    return (\r\n      <div className=\"timesheet-page\" >\r\n\r\n        <h4>\r\n          {user.name.split(\" \")[0]}!\r\n              Here is your time sheet space\r\n            </h4>\r\n        <Button variant=\"primary\" onClick={this.onLogoutClick}>Logout</Button>\r\n\r\n        {/* timesheet section */}\r\n\r\n        <div className=\"calender-section\">\r\n          {/* <FullCalendar\r\n            defaultView=\"dayGridMonth\"\r\n            plugins={[dayGridPlugin, interactionPlugin]}\r\n            editable={true}\r\n            dateClick ={this.handleEventClick}\r\n            select={this.handleDateSelect}\r\n\r\n          /> */}\r\n\r\n<FullCalendar\r\n            plugins={[dayGridPlugin, interactionPlugin]}\r\n            headerToolbar={{\r\n              left: 'prev,next today',\r\n              center: 'title',\r\n              right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n            }}\r\n            initialView='dayGridMonth'\r\n            editable={true}\r\n            selectable={true}\r\n            selectMirror={true}\r\n            dayMaxEvents={true}\r\n            weekends={true}\r\n            //initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\r\n            select={this.handleDateSelect}\r\n            dateClick ={this.handleEventClick}\r\n           // eventContent={renderEventContent} // custom render function\r\n            eventClick={this.handleEventClick}\r\n            eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\r\n            events={events}\r\n            viewSkeletonRender={info => { this.callbackFunction(info) } }\r\n            /* you can update a remote database when these fire:\r\n            eventAdd={function(){}}\r\n            eventChange={function(){}}\r\n            eventRemove={function(){}}\r\n            */\r\n          />\r\n        </div>\r\n\r\n\r\n\r\n        {/* \r\n                    eventDrop={this.handleEventDrop}\r\n                    eventClick={this.handleEventClick}\r\n                    events={this.formatEvents()} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nDashboard.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { logoutUser }\r\n)(Dashboard);"]},"metadata":{},"sourceType":"module"}