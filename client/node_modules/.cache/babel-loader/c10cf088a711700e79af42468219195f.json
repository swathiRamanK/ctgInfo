{"ast":null,"code":"var _jsxFileName = \"D:\\\\swathi folder\\\\mern-auth-with-frontend\\\\mern-auth\\\\client\\\\src\\\\components\\\\dashboard\\\\Dashboard.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../actions/authActions\"; // calender import\n\nimport FullCalendar, { EventApi, DateSelectArg, EventClickArg, EventContentArg, formatDate, ViewApi } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid'; // import timeGridPlugin from '@fullcalendar/timegrid';\n\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { INITIAL_EVENTS, createEventId } from './event-utils.js';\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onLogoutClick = e => {\n      e.preventDefault();\n      this.props.logoutUser();\n    };\n\n    this.handleDateSelect = ({\n      selectionInfo: ev\n    }) => {\n      console.log(ev); // openAppointment is a function I wrote to open a form to edit that appointment\n\n      console.log('kkk');\n    };\n\n    this.handleDateSelect = selectInfo => {\n      console.log('selectInfo', selectInfo);\n      let title = prompt('Please enter your logged hours');\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect(); // clear date selection\n\n      if (title) {\n        console.log('calendarApi', calendarApi);\n        calendarApi.addEvent(\n        /*{\r\n        id: createEventId(),\r\n        title,\r\n        start: selectInfo.startStr,\r\n        end: selectInfo.endStr,\r\n        allDay: selectInfo.allDay\r\n        },*/\n        {\n          id: createEventId(),\n          title,\n          start: calendarApi.view.currentStart,\n          end: calendarApi.view.currentEnd,\n          allDay: selectInfo.allDay\n        });\n      }\n    };\n  }\n\n  render() {\n    const {\n      user\n    } = this.props.auth;\n    const events = [{\n      title: \"\",\n      date: ''\n    }];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"timesheet-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, user.name.split(\" \")[0], \"! Here is your time sheet space\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.onLogoutClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, \"Logout\"));\n  }\n\n}\n\nDashboard.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  logoutUser\n})(Dashboard);","map":{"version":3,"sources":["D:/swathi folder/mern-auth-with-frontend/mern-auth/client/src/components/dashboard/Dashboard.js"],"names":["React","Component","PropTypes","Button","connect","logoutUser","FullCalendar","EventApi","DateSelectArg","EventClickArg","EventContentArg","formatDate","ViewApi","dayGridPlugin","interactionPlugin","INITIAL_EVENTS","createEventId","Dashboard","onLogoutClick","e","preventDefault","props","handleDateSelect","selectionInfo","ev","console","log","selectInfo","title","prompt","calendarApi","view","calendar","unselect","addEvent","id","start","currentStart","end","currentEnd","allDay","render","user","auth","events","date","name","split","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\n\r\n// calender import\r\nimport FullCalendar, { EventApi, DateSelectArg, EventClickArg, EventContentArg, formatDate,ViewApi} from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\n// import timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport { INITIAL_EVENTS, createEventId } from './event-utils.js'\r\n\r\n\r\n\r\nclass Dashboard extends Component {\r\n  onLogoutClick = e => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n\r\n\r\n  \r\n \r\n\r\n\r\n  handleDateSelect= ({selectionInfo:ev}) => {\r\n\r\n    console.log(ev)\r\n    // openAppointment is a function I wrote to open a form to edit that appointment\r\n    console.log('kkk');\r\n}\r\n\r\nhandleDateSelect = (selectInfo: DateSelectArg) => {\r\n\r\n  console.log('selectInfo',selectInfo);\r\n  let title = prompt('Please enter your logged hours')\r\n  let calendarApi = selectInfo.view.calendar\r\n\r\n  calendarApi.unselect() // clear date selection\r\n\r\n  if (title) {\r\n\r\n    console.log('calendarApi',calendarApi)\r\n    calendarApi.addEvent(\r\n      /*{\r\n      id: createEventId(),\r\n      title,\r\n      start: selectInfo.startStr,\r\n      end: selectInfo.endStr,\r\n      allDay: selectInfo.allDay\r\n    },*/\r\n    {\r\n      id: createEventId(),\r\n      title,\r\n      start: calendarApi.view.currentStart,\r\n      end:calendarApi.view.currentEnd,\r\n      allDay: selectInfo.allDay\r\n    })\r\n  }\r\n}\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n    const { user } = this.props.auth;\r\n\r\n    const events = [{ title: \"\", date:''}];\r\n\r\n\r\n\r\n    return (\r\n      <div className=\"timesheet-page\" >\r\n\r\n        <h4>\r\n          {user.name.split(\" \")[0]}!\r\n              Here is your time sheet space\r\n            </h4>\r\n        <Button variant=\"primary\" onClick={this.onLogoutClick}>Logout</Button>\r\n\r\n        {/* timesheet section */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nDashboard.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { logoutUser }\r\n)(Dashboard);"]},"metadata":{},"sourceType":"module"}